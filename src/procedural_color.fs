// Set the pixel color to an interesting procedural color generated by mixing
// and filtering Perlin noise of different frequencies.
//
// Uniforms:
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
in vec3 sphere_fs_in;
in vec3 normal_fs_in;
in vec4 pos_fs_in; 
in vec4 view_pos_fs_in; 
// Outputs:
out vec3 color;

// expects: blinn_phong, perlin_noise
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code 
  float p = 1000;
  float theta = 0.25*animation_seconds*M_PI;
  
  vec3 n = normalize(normal_fs_in);
  vec3 v = -1.0 * normalize(view_pos_fs_in.xyz);
  vec3 l = vec3(sin(theta), 0.8, -cos(theta));

  vec3 ka = vec3(0.25, 0.25, 0.25);
  vec3 ks;
  vec3 kd;

  float noiseDiff = (perlin_noise(sphere_fs_in * 3.5) + 0.65)/2.0;
  float noiseSpec = 9.11*perlin_noise(25.12*sphere_fs_in);
  if(is_moon){
    ks = clamp(vec3(0.7, 0.7, 0.7) + noiseSpec, 0, 1);
    kd = clamp(vec3(0.5, 0.5, 0.5) + noiseDiff, 0, 1);
  }
  else{
    ks = clamp(vec3(1,1,1) + noiseSpec, 0, 1);
    kd = clamp(vec3(0.75, 0.15, 0.15) + noiseDiff, 0, 1);
  }

  color = blinn_phong(ka, kd, ks, p, n, v, l);
  /////////////////////////////////////////////////////////////////////////////
}
